@inject IJSRuntime JSRuntime
@inject ICategoriaFraseService CategoriaFraseService;

@page "/int/categorias"
@attribute [Authorize(Roles = "Administrador")]

<PageTitle>Categorias</PageTitle>

<div class="container">
    <div class="card mt80">
        <div class="cab">
            <h1>Categorias</h1>
            <a href="/int/categorias/nova" class="btn btn-roxo">INCLUIR CATEGORIA</a>
        </div>
        <ListaPaginada Dados="categorias.OrderBy(x => x.Categoria)" Context="c" QtdeItensPorPagina="15">
            <ConteudoPrincipal>
                <div class="item sombra">
                    <div class="grupo">
                        <div>
                            <label>Nome</label>
                            <div>@c.Categoria</div>
                        </div>
                        <div>
                            <label>Descricao</label>
                            <div>@c.Descricao</div>
                        </div>
                        <div>
                            <label>Categoria ativa?</label>
                            <div>@(c.Ativo == true ? "Sim" : "Não")</div>
                        </div>
                        <div>
                            <label>Frases</label>
                            <div>@TotalFrasesCategoria</div>
                        </div>
                        <div>
                            <label>Data de cadastro?</label>
                            <div>@c.DataCadastro.ToShortDateString().ToString()</div>
                        </div>
                        <div>
                            <div class="acoes">
                                <a href="/int/categorias/gerenciar-categoria/@c.Id" class="btn btn-amarelo">Editar</a>
                                <a @onclick="async () => await ApagarCategoria(c.Id)" class="btn btn-vermelho">Excluir</a>
                            </div>
                        </div>
                    </div>
                </div>
            </ConteudoPrincipal>
        </ListaPaginada>
    </div>
</div>

@code {
    private IQueryable<CategoriaFrase> categorias;
    protected int TotalFrasesCategoria;

    // ao inicializar busca todas categorias
    protected override async Task OnInitializedAsync() {
        categorias = await CategoriaFraseService.BuscarTodas();
        TotalFrasesCategoria = categorias.Count();
    }

    async Task ApagarCategoria(Guid id) {

        // exibe um alerta de confirmacao ao apagar categoria
        bool confirm = await JSRuntime.InvokeAsync<bool>("confirm", "Tem certeza que deseja excluir essa categoria?");

        // se a confirmacao for false para por aqui
        if (confirm is false)
            return;

        // se a confirmacao for true logaliza a categoria pelo id
        var categoria = await CategoriaFraseService.BuscarPor(id);

        // apaga a categoria encontrada
        await CategoriaFraseService.Apagar(categoria);

        // atualiza as categorias que serao exibidas
        categorias = await CategoriaFraseService.BuscarTodas();

        TotalFrasesCategoria = categorias.Count();

        StateHasChanged();
    }
}