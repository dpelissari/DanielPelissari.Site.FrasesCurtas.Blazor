@page "/int/categorias"
@attribute [Authorize(Roles = "Administrador")]

@using FrasesCurtas.Models
@inject IJSRuntime JSRuntime
@inject FrasesCurtas.Services.ICategoriaFraseService CategoriaFraseService;
@using FrasesCurtas.Componentes;
@layout InternasLayout;

<PageTitle>Gerenciar categorias</PageTitle>

<div class="container">
    <div class="frases card">
        <div class="cab">
            <h1>Gerenciar categorias</h1>
            <a href="/int/autores/adicionar-autor" class="btn btn-roxo">INCLUIR CATEGORIA</a>
        </div>
        <ListaPaginada Dados="categorias" ExibirTotalPaginas="true" Context="c">
            <ConteudoPrincipal>
                <div class="item sombra">
                    <div class="grupo">
                        <div>
                            <label>Categoria</label>
                            <div>@c.Categoria</div>
                        </div>
                        <div>
                            <label>Descrição</label>
                            <div>@c.Descricao</div>
                        </div>
                        <div>
                            <label>Categoria ativa?</label>
                            <div>@(c.Ativo == true ? "Sim" : "Não")</div>
                        </div>
                        <div>
                            <label>Frases</label>
                            <p>@c.Frases.Count</p>
                        </div>
                        <div>
                            <label>Data de cadastro</label>
                            <p>@c.DataCadastro.ToShortDateString().ToString()</p>
                        </div>
                        <div class="acoes">
                            <a href="/int/autores/atualizar-autor/@c.Id" class="btn btn-amarelo">Editar</a>
                            <a @onclick="async () => await ApagarCategoria(c.Id)" class="btn btn-vermelho">Excluir</a>
                        </div>
                    </div>

                </div>
            </ConteudoPrincipal>
        </ListaPaginada>
    </div>
</div>

@code {
    private IQueryable<CategoriaFrase> categorias;

    // ao inicializar busca todas categorias
    protected override async Task OnInitializedAsync() {
        categorias = await CategoriaFraseService.BuscarTodas();
    }

    async Task ApagarCategoria(Guid id) {

        // exibe um alerta de confirmacao ao apagar categoria
        bool confirm = await JSRuntime.InvokeAsync<bool>("confirm", "Tem certeza que deseja excluir essa categoria?");

        // se a confirmacao for false para por aqui
        if (confirm is false)
            return;

        // se a confirmacao for true logaliza a categoria pelo id
        var categoria = await CategoriaFraseService.BuscarPor(id);

        // apaga a categoria encontrada
        await CategoriaFraseService.Apagar(categoria);

        // atualiza as categorias que serao exibidas
        categorias = await CategoriaFraseService.BuscarTodas();

        StateHasChanged();
    }
}