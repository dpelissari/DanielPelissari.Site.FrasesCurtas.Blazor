@page "/int/autores/adicionar-autor/";
@attribute [Authorize(Roles = "Administrador")]

@using FrasesCurtas.Componentes
@using FrasesCurtas.Models;
@inject NavigationManager NavigationManager;
@inject FrasesCurtas.Services.IAutorService AutorService;



<div class="container">
    <h3>Adicionar autor</h3> 

    <EditForm Model="autor" OnValidSubmit="CriarAutor">
        <div>
            <label for="nomeAutor">Nome</label>
            <InputText @bind-Value="autor.Nome" class="form-control" id="autornome"></InputText>
        </div>
        <div>
            <label for="dataCadastroAutor">Data Cadastro</label>
            <InputDate @bind-Value="autor.DataCadastro"/>
        </div>
        <div>
            <label for="arquivadaFrase">Ativo?</label>
            <InputSelect @bind-Value="autor.Ativo" class="form-control">
                 <option value="true">Sim</option>
                 <option value="false" selected>Não</option>

            </InputSelect>
        </div>

        <div>
            <label>Imagem</label>
            <InputFile  OnChange="HandleFileSelection"/>
            <img src="@autor.CaminhoImagem" id="target">

            <PlaceHolder Visible="!string.IsNullOrEmpty(Erro)">
                <p>@Erro</p>
            </PlaceHolder>

        </div>

        <DataAnnotationsValidator />
        <ValidationSummary />

        <button type="submit">Incluir</button>
    </EditForm>

</div>

@code {
    Autor autor = new();
    public string Erro { get; set; } = string.Empty;

    private bool ArquivoEhImagem(IBrowserFile file) {

        // extensões de imagem válidas
        var extensoesPermitidas = new[] { ".jpg", ".jpeg", ".png"};

        // verifica se a extensão do arquivo está na lista de extensões permitidas
        var extensaoArquivo = Path.GetExtension(file.Name);
        return extensoesPermitidas.Contains(extensaoArquivo.ToLower());
    }

    private async Task HandleFileSelection(InputFileChangeEventArgs e) {
        var arquivo = e.File;

        if (arquivo != null && ArquivoEhImagem(arquivo))
        {

            var caminhoArquivo = Path.Combine("wwwroot", "autores", arquivo.Name);
            using (var stream = new FileStream(caminhoArquivo, FileMode.Create)) {
                await arquivo.OpenReadStream().CopyToAsync(stream);
            }
            autor.CaminhoImagem = $"/autores/{arquivo.Name}";
            Erro = string.Empty;

        }  else
        {
            Erro = "Arquivo não selecionado ou inválido (Arquivos aceitos: .jpg e .png)";
        };
    }



    async Task CriarAutor() {
        autor.GerarNovoId();
        await AutorService.Adicionar(autor);
        NavigationManager.NavigateTo("/int/autores");
    }
}
