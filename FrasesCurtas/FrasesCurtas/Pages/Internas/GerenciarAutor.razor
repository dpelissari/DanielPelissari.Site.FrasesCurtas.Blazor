@page "/int/autores/gerenciar-autor/{id?}"
@page "/int/autores/novo/"
@attribute [Authorize(Roles = "Administrador")]


@using FrasesCurtas.Componentes
@using FrasesCurtas.Interfaces;
@using FrasesCurtas.Models
@inject NavigationManager NavigationManager
@inject IAutorService AutorService
@inject IWebHostEnvironment _ambiente;
@layout InternasLayout

<div class="container">
    <div class="card mt80">

        @if (modoEdicao)
        {
            <h1>Editar autor</h1>

            <EditForm Model="autor" OnValidSubmit="AtualizarAutores">
                <div>
                    <div class="cmp">
                        <label>Nome</label>
                        <InputText @bind-Value="autor.Nome"></InputText>
                        <ValidationMessage For="@(() => autor.Nome)" />
                    </div>
                    <div class="cmp">
                        <ImagemUpload Modelo="@autor" DiretorioImagem="imagens/autores" />
                        <ValidationMessage For="@(() => autor.CaminhoImagem)" />
                    </div>
                    <div class="cmp">
                        <label>Autor ativo?</label>
                        <InputSelect @bind-Value="autor.Ativo">
                            <option value="true">Sim</option>
                            <option value="false">Não</option>
                        </InputSelect>
                    </div>
                            
                    <ValidationMessage For="@(() => autor.Ativo)" />
                      
                    <div class="acoes mtb20">
                        <button class="btn btn-amarelo" type="submit">ATUALIZAR</button>
                        <NavLink class="btn btn-vermelho" href="int/autores/">CANCELAR</NavLink>
                    </div>
                </div>
                 <DataAnnotationsValidator />
            </EditForm>
        }
        else
        {
            <h3>Incluir Autor</h3>

            <EditForm Model="autor" OnValidSubmit="CriarAutor">
                <div>
                    <ImagemUpload Modelo="@autor" DiretorioImagem="autores" TextoLabel="Upload imagem" LarguraImagem="100" />
                    <ValidationMessage For="@(() => autor.CaminhoImagem)" />
                </div>
                <div>
                    <label>Nome</label>
                    <InputText @bind-Value="autor.Nome" class="form-control" id="autornome"></InputText>
                    <ValidationMessage For="@(() => autor.Nome)" />
                </div>
                <div>
                    <div class="cmp">
                        <label>Autor ativo?</label>
                        <InputSelect @bind-Value="autor.Ativo">
                            <option value="true">Sim</option>
                            <option value="false">Não</option>
                        </InputSelect>
                    </div>
                    <ValidationMessage For="@(() => autor.Ativo)" />
                </div>

                <DataAnnotationsValidator />

                <div class="acoes">
                    <button class="btn btn-amarelo" type="submit">INCLUIR</button>
                    <NavLink class="btn btn-vermelho" href="int/autores/">CANCELAR</NavLink>
                </div>
            </EditForm>
        }
    </div>

</div>

@code {
    Autor autor = new();
    bool modoEdicao = false;

    [Parameter]
    public string id { get; set; }

    protected override async Task OnInitializedAsync() {
        if (!string.IsNullOrEmpty(id))
        {

            if (Guid.TryParse(id, out Guid idAutor))
            {
                autor = await AutorService.BuscarPor(idAutor);
                modoEdicao = true;
            }
            else
            {
                // ID inválido, redireciona para listagem de autores
                NavigationManager.NavigateTo("/int/autores");
            }
        }
    }

    async Task CriarAutor() {
        autor.GerarNovoId();
        await AutorService.Adicionar(autor);
        NavigationManager.NavigateTo("/int/autores");
    }

    async Task AtualizarAutores() {
        await AutorService.Atualizar(autor);
        NavigationManager.NavigateTo("/int/autores");
    }
}
