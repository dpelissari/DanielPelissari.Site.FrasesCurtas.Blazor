@page "/int/frases"
@attribute [Authorize(Roles = "Administrador")]

@using FrasesCurtas.Models
@inject IJSRuntime JSRuntime
@inject FrasesCurtas.Services.IFraseService FraseService;
@inject FrasesCurtas.Services.IAutorService AutorService;
@using FrasesCurtas.Componentes;

<PageTitle>Frases</PageTitle>


<div class="container">
    <h1>Frases</h1>

    <a href="/int/frases/adicionar-frase/">Criar</a>

    <div class="frases card lista-itens">
        <ListaPaginada Dados="frases">
            <ConteudoPrincipal>
                <div class="frase-item item">

                    <div>
                        <h3>Frase</h3>
                        <p>@context.Descricao</p>
                    </div>

                    <div>
                        <h3>Autor</h3>
                        <p>@context.Autor?.Nome</p>
                    </div>

                    <div>
                        <h3>Data Cadastro</h3>
                        <p>context.DataCadastro</p>
                    </div>

                    <div>
                        <h3>Arquivada?</h3>
                        <p>@(context.Arquivada == true ? "sim" : "Não")</p>
                    </div>

                    <div class="acoes">
                        <h3>Ações</h3>
                        <a href="/int/frases/atualizar-frase/@context.Id" class="btn btn-amarelo">Atualizar</a>
                        <a @onclick="async () => await ApagarFrase(context.Id)" class="btn btn-vermelho">Apagar</a>
                    </div>
                </div>
            </ConteudoPrincipal>
        </ListaPaginada>
    </div>
</div>


@code {

    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }

    private IQueryable<Frase> frases;

    // ao inicializar busca todas frases
    protected override async Task OnInitializedAsync() {
        frases = await FraseService.BuscarTodas();

        // alimenta autores
        foreach (var frase in frases)
        {
            frase.Autor = await AutorService.BuscarPor(frase.IdAutor);
        }
    }

    async Task ApagarFrase(Guid id) {

        // exibe um alerta de confirmacao
        bool confirm = await JSRuntime.InvokeAsync<bool>("confirm", "Tem certeza que deseja excluir essa frase?");

        // se a confirmacao for false para por aqui
        if (confirm is false)
            return;

        // se a confirmacao for true logaliza a frase pelo id
        var frase = await FraseService.BuscarPor(id);

        // apaga a frase localizada
        await FraseService.Apagar(frase);

        // atualiza as frases a serem exibidas
        frases = await FraseService.BuscarTodas();

        StateHasChanged();
    }
}