@page "/int/frases"
@attribute [Authorize(Roles = "Administrador")]

@using FrasesCurtas.Models
@inject IJSRuntime JSRuntime
@inject FrasesCurtas.Services.IFraseService FraseService;
@inject FrasesCurtas.Services.IAutorService AutorService;
@using FrasesCurtas.Componentes;

<PageTitle>Frases</PageTitle>

<Outdoor/>

<div class="container"> 
<h1>Frases</h1>

<a href="/int/frases/adicionar-frase/">Criar</a>

<ListaPaginada Dados="frases">
  <ConteudoPrincipal>
      <table>
          <tr>
            <th>Frase</th>
            <th>Autor</th>
            <th>Data Cadastro</th>
            <th>Arquivada?</th>
        </tr>
         <tr>
        <td>@context.Descricao</td>
        <td>@context.Autor?.Nome</td>
        <td>@context.DataCadastro</td>
        <td>@context.Arquivada</td>
        <td><a href="/int/frases/atualizar-frase/@context.Id">Atualizar</a></td>
        <td><button @onclick="async () => await ApagarFrase(context.Id)">Apagar</button></td>
             
         </tr>
      </table>
        
      
  </ConteudoPrincipal>
</ListaPaginada>
</div>

@code {

    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set;  }

    private IQueryable<Frase> frases;

    // ao inicializar busca todas frases
    protected override async Task OnInitializedAsync() { 
        frases = await FraseService.BuscarTodas(); 

        // alimenta autores
        foreach (var frase in frases){
            frase.Autor = await AutorService.BuscarPor(frase.IdAutor);    
        }
    }

    async Task ApagarFrase(Guid id) {

        // exibe um alerta de confirmacao
        bool confirm = await JSRuntime.InvokeAsync<bool>("confirm", "Tem certeza que deseja excluir essa frase?");

        // se a confirmacao for false para por aqui
        if (confirm is false)
            return;

        // se a confirmacao for true logaliza a frase pelo id
        var frase = await FraseService.BuscarPor(id);

        // apaga a frase localizada
        await FraseService.Apagar(frase);

        // atualiza as frases a serem exibidas
        frases = await FraseService.BuscarTodas();

        StateHasChanged();
    }
}