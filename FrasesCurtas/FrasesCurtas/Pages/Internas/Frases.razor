@page "/int/frases"
@attribute [Authorize(Roles = "Administrador")]

@using FrasesCurtas.Models
@inject IJSRuntime JSRuntime
@inject FrasesCurtas.Services.IFraseService FraseService;
@inject FrasesCurtas.Services.IAutorService AutorService;
@inject FrasesCurtas.Services.ICategoriaFraseService CategoriaFraseService;
@using FrasesCurtas.Componentes;
@layout InternasLayout;

<PageTitle>Gerenciar frases</PageTitle>

<div class="container">
    <div class="card mt80">
        <div class="cab">
            <h1>Frases</h1>
            <a href="/int/frases/nova/" class="btn btn-roxo">INCLUIR FRASE</a>
        </div>
        <ListaPaginada Dados="frases" ExibirTotalPaginas="true" Context="f">
            <ConteudoPrincipal>
                <div class="item sombra">
                    <div>
                        <label>Frase</label>
                        <div>@f.Descricao</div>
                    </div>
                    <div class="grupo">
                        <div>
                            <label>Autor</label>
                            <div>@f.Autor.Nome</div>
                        </div>
                        <div>
                            <label>Categoria</label>
                            <div>@f.Categoria.Categoria</div>
                        </div>
                        <div>
                            <label>Arquivada?</label>
                            <div>@(f.Arquivada == true ? "Sim" : "Não")</div>
                        </div>
                        <div>
                            <div class="acoes">
                                <a href="/int/frases/gerenciar-frase/@f.Id" class="btn btn-amarelo">Editar</a>
                                <a @onclick="async () => await ApagarFrase(f.Id)" class="btn btn-vermelho">Excluir</a>
                            </div>
                        </div>
                    </div>
                </div>
            </ConteudoPrincipal>
        </ListaPaginada>
    </div>
</div>

@code {

    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }

    private IQueryable<Frase> frases;

    // ao inicializar busca todas frases
    protected override async Task OnInitializedAsync() {
        frases = await FraseService.BuscarTodas();

        // obtem autores e categoria
        foreach (var frase in frases)
        {
            frase.Autor = await AutorService.BuscarPor(frase.IdAutor);
            frase.Categoria = await CategoriaFraseService.BuscarPor(frase.IdCategoriaFrase);
        }
    }

    async Task ApagarFrase(Guid id) {

        // exibe um alerta de confirmacao
        bool confirm = await JSRuntime.InvokeAsync<bool>("confirm", "Tem certeza que deseja excluir essa frase?");

        // se a confirmacao for false para por aqui
        if (confirm is false) return;

        // se a confirmacao for true logaliza a frase pelo id
        var frase = await FraseService.BuscarPor(id);

        // apaga a frase localizada
        await FraseService.Apagar(frase);

        // atualiza as frases a serem exibidas
        frases = await FraseService.BuscarTodas();

        StateHasChanged();
    }
}