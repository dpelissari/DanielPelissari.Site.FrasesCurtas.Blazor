@page "/int/frases/atualizar-frase/{id}";
@attribute [Authorize(Roles = "Administrador")]
@using FrasesCurtas.Componentes
@using FrasesCurtas.Models;
@inject NavigationManager NavigationManager;
@inject FrasesCurtas.Services.IFraseService FraseService;
@inject FrasesCurtas.Services.IAutorService AutorService;
@inject FrasesCurtas.Services.ICategoriaFraseService CategoriaFraseService;

<div class="container">

    <h3>Atualizar Frase</h3>

    <EditForm Model="frase" OnValidSubmit="AtualizarFrases">

        <div>
            <label>Autor</label>
            <InputSelect @bind-Value="frase.IdAutor">

                @foreach (var autor in autores)
                {
                    <option value="@autor.Id">@autor.Nome</option>
                }
            </InputSelect>
        </div>

        <div>
            <label>Categoria</label>
            <InputSelect @bind-Value="frase.IdCategoriaFrase">

                @foreach (var categoria in categorias)
                {
                    <option value="@categoria.Id">@categoria.Categoria</option>
                }
            </InputSelect>
        </div>

        <div>
            <label for="descricaoFrase">Frase</label>
            <InputText @bind-Value="frase.Descricao" class="form-control" id="descricaoFrase"></InputText>
        </div>
        <div>
            <label for="dataCadastroFrase">Data Cadastro</label>
            <InputDate @bind-Value="frase.DataCadastro" id="dataCadastroFrase" />
        </div>
        <div>
            <label for="arquivadaFrase">Arquvida</label>
            <InputSelect @bind-Value="frase.Arquivada" class="form-control">
                <option value="true">Sim</option>
                <option value="false">Não</option>
            </InputSelect>
        </div>

        <DataAnnotationsValidator />
        <ValidationSummary />

        <button class="btn btn-success" type="submit">Salvar</button>
        <NavLink href="int/frases/">Cancelar</NavLink>

    </EditForm>

</div>

@code {
    Frase frase = new();
    private IQueryable<Autor> autores;
    private IQueryable<CategoriaFrase> categorias;

    [Parameter] public string id { get; set; }

    protected override async Task OnInitializedAsync() {
        frase = await FraseService.BuscarPor(Guid.Parse(id));
        autores = await AutorService.BuscarTodas();
        categorias = await CategoriaFraseService.BuscarTodas();
    }

    async Task AtualizarFrases() {
        await FraseService.Atualizar(frase);
        NavigationManager.NavigateTo("/int/frases");
    }

}
