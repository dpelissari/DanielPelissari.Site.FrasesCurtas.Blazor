@page "/int/frases/gerenciar-frase/{id?}"
@page "/int/frase/nova/"
@attribute [Authorize(Roles = "Administrador")]

@using FrasesCurtas.Componentes
@using FrasesCurtas.Models
@inject NavigationManager NavigationManager
@inject FrasesCurtas.Services.IFraseService FraseService;
@inject FrasesCurtas.Services.IAutorService AutorService;
@inject FrasesCurtas.Services.ICategoriaFraseService CategoriaFraseService;
@layout InternasLayout

<div class="container">
    @if (modoEdicao)
    {
        <h3>Atualizar Frase</h3>

        <EditForm Model="frase" OnValidSubmit="AtualizarFrases">

            <div>
                <label>Autor</label>
                <InputSelect @bind-Value="frase.IdAutor">

                    @foreach (var autor in autores)
                    {
                        <option value="@autor.Id">@autor.Nome</option>
                    }
                </InputSelect>
            </div>

            <div>
                <label>Categoria</label>
                <InputSelect @bind-Value="frase.IdCategoriaFrase">

                    @foreach (var categoria in categorias)
                    {
                        <option value="@categoria.Id">@categoria.Categoria</option>
                    }
                </InputSelect>
            </div>

            <div>
                <label for="descricaoFrase">Frase</label>
                <InputText @bind-Value="frase.Descricao" class="form-control" id="descricaoFrase"></InputText>
            </div>
            <div>
                <label for="dataCadastroFrase">Data Cadastro</label>
                <InputDate @bind-Value="frase.DataCadastro" id="dataCadastroFrase" />
            </div>
            <div>
                <label for="arquivadaFrase">Arquvida</label>
                <InputSelect @bind-Value="frase.Arquivada" class="form-control">
                    <option value="true">Sim</option>
                    <option value="false">Não</option>
                </InputSelect>
            </div>

            <DataAnnotationsValidator />
            <ValidationSummary />

            <button class="btn btn-success" type="submit">Salvar</button>
            <NavLink href="int/frases/">Cancelar</NavLink>

        </EditForm>
    }
    else
    {
        <h3>Adicionar Frase</h3>

        <EditForm Model="frase" OnValidSubmit="CriarFrase">
            <div>
                <label>Categoria</label>
                <InputSelect @bind-Value="frase.IdCategoriaFrase">
                    @foreach (var categoria in categorias)
                    {
                        <option value="@categoria.Id">@categoria.Categoria</option>
                    }
                </InputSelect>


                <label>Autor</label>
                <InputSelect @bind-Value="frase.IdAutor">
                    @foreach (var autor in autores)
                    {
                        <option value="@autor.Id">@autor.Nome</option>
                    }
                </InputSelect>
                <label for="descricaoFrase">Frase</label>
                <InputText @bind-Value="frase.Descricao" id="descricaoFrase"></InputText>
            </div>
            <div>
                <label for="dataCadastroFrase">Data Cadastro</label>
                <InputDate @bind-Value="frase.DataCadastro" id="dataCadastroFrase" />
            </div>
            <div>
                <label for="arquivadaFrase">Arquvida</label>
                <InputSelect @bind-Value="frase.Arquivada" class="form-control">
                    <option value="true">Sim</option>
                    <option value="false" selected>Não</option>
                </InputSelect>
            </div>

            <DataAnnotationsValidator />
            <ValidationSummary />

            <button type="submit">Incluir</button>
        </EditForm>
    }
</div>

@code {
    Frase frase = new();
    private IQueryable<Autor> autores;
    private IQueryable<CategoriaFrase> categorias;
    bool modoEdicao = false;

    [Parameter]
    public string id { get; set; }

    protected override async Task OnInitializedAsync() {

        autores = await AutorService.BuscarTodas();
        categorias = await CategoriaFraseService.BuscarTodas();

        if (!string.IsNullOrEmpty(id))
        {
            modoEdicao = true;
            frase = await FraseService.BuscarPor(Guid.Parse(id));
        }
    }

    async Task CriarFrase() {
        frase.GerarNovoId();
        await FraseService.Adicionar(frase);
        NavigationManager.NavigateTo("/int/frases");
    }

    async Task AtualizarFrases() {
        await FraseService.Atualizar(frase);
        NavigationManager.NavigateTo("/int/frases");
    }
}
