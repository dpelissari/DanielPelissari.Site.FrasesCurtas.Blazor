@inject IJSRuntime JSRuntime
@inject IAutorService AutorService;

@page "/autores"
<PageTitle>Autores</PageTitle>

<div class="container mt80">
    <h1>Autores</h1>
    <div class="autores">
        <ListaPaginada Dados="autores?.OrderBy(a => a.Nome).Where(a => a.Ativo)" QtdeItensPorPagina="8">
            <ConteudoPrincipal>
                <NavLink href="@($"autor/{context.Id}")">
                    <div class="card sombra">
                        <div class="imagem-autor">
                            <img src="@context.CaminhoImagem" alt="@context.Nome" />
                        </div>
                        <div>
                            <p>@context.Nome</p>
                        </div>
                    </div>
                </NavLink>
            </ConteudoPrincipal>
        </ListaPaginada>
    </div>
</div>

@code {
    private IQueryable<Autor>? autores;

    // ao inicializar busca todos autores
    protected override async Task OnInitializedAsync() {
        autores = await AutorService.BuscarTodas();
    }

    async Task ApagarFrase(Guid id) {

        // exibe um alerta de confirmacao ao apagar autor
        bool confirm = await JSRuntime.InvokeAsync<bool>("confirm", "Tem certeza que deseja excluir esse autor?");

        // se a confirmacao for false para por aqui
        if (confirm is false) return;

        // se a confirmacao for true logaliza o autor pelo id
        var autor = await AutorService.BuscarPor(id);

        // apaga o autor encontrado
        await AutorService.Apagar(autor);

        // atualiza os autores que serao exibidos
        autores = await AutorService.BuscarTodas();

        StateHasChanged();
    }
}