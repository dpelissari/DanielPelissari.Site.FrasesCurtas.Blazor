@inject NavigationManager NavigationManager
@inject IFraseService FraseService;
@inject IAutorService AutorService;
@inject ICategoriaFraseService CategoriaFraseService;

@page "/autor/"
@page "/autor/{id}"
<PageTitle>Autor @autor.Nome</PageTitle>

<div class="container mt80">

    <h1>Frases de @autor.Nome</h1>

    @if (autor != null)
    {
        @if (frases != null && frases.Any())
        {
            <Repeater DataSource="frases" Context="frase">
                <ItemTemplate>
                    <div class="card sombra">
                        <p class="categoria">@frase.Categoria.Categoria</p>
                        <p class="frase">@frase.Descricao</p>
                        <Compartilhamento Modelo="frase" />
                    </div>
                </ItemTemplate>
            </Repeater>
        }
        else
        {
            <div class="card sombra">
                <p>Nenhuma frase encontrada para o autor @autor.Nome.</p>
            </div>
        }
    }

    <NavLink href="autores/" class="link">Voltar para a lista de autores</NavLink>
</div>


@code {

    [Parameter] public string? Id { get; set; }

    private Autor autor = new();
    private IQueryable<Frase>? frases;
    private string? mensagem;

    protected override async Task OnInitializedAsync() {

        if (!string.IsNullOrEmpty(Id))
        {
            if (Guid.TryParse(Id, out Guid idAutor))
            {
                frases = await FraseService.BuscarPorAutorId(idAutor);
                autor = await AutorService.BuscarPor(idAutor);

                // Alimenta autores e categoria
                foreach (var frase in frases)
                {
                    frase.Categoria = await CategoriaFraseService.BuscarPor(frase.IdCategoriaFrase);
                }
            }
            else
            {
                // ID inválido, redireciona para listagem de autores
                NavigationManager.NavigateTo("/autores");
            }
        }
    }
}