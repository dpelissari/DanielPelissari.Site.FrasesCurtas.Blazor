@page "/categoria/"
@page "/categoria/{id}"
@using FrasesCurtas.Models
@using FrasesCurtas.Services;
@inject FrasesCurtas.Services.ICategoriaFraseService CategoriaFraseService;
@inject FrasesCurtas.Services.IFraseService FraseService;
@inject FrasesCurtas.Services.IAutorService AutorService;
@layout InternasLayout

<div class="container mt80">
    <h1>@categoria.Categoria</h1>

    @if (categoria != null)
    {
        if (frases != null && frases.Any())
        {
            @foreach (var frase in frases)
            {
                <div class="card sombra">
                    <p class="categoria">@categoria.Categoria</p>
                    <p class="frase">@frase.Descricao</p>
                    <p class="autor">Autor: @frase.Autor.Nome</p>
                </div>
            }
        }
        else
        {
            <div class="card sombra">
                <p>Nenhuma frase encontrada para a categoria @categoria.Categoria.</p>
            </div>
        }

    }
    else
    {
        <div class="card sombra">
            <p>Categoria não encontrada!</p>
        </div>
    }
    <NavLink href="categorias/">Voltar lista de categorias</NavLink>
</div>


@code {
    [Parameter]
    public string Id { get; set; }

    private CategoriaFrase categoria;
    private IQueryable<Frase> frases;
    private string mensagem;

    protected override async Task OnInitializedAsync() {
        if (!string.IsNullOrEmpty(Id) && Guid.TryParse(Id, out Guid categoriaId))
        {
            categoria = await CategoriaFraseService.BuscarPor(categoriaId);
            if (categoria != null)
            {
                frases = await FraseService.BuscarPorIdCategoria(categoriaId);

                // Alimenta autores e categoria
                foreach (var frase in frases)
                {
                    frase.Categoria = await CategoriaFraseService.BuscarPor(frase.IdCategoriaFrase);
                    frase.Autor = await AutorService.BuscarPor(frase.IdAutor);
                }
            }
        }

    }
}