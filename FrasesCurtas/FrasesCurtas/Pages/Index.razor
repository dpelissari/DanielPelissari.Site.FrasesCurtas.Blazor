@inject IFraseService FraseService
@inject IAutorService AutorService
@inject NavigationManager NavigationManager
@inject ICategoriaFraseService CategoriaFraseService;

@page "/"

@layout HomeLayout;
<PageTitle>Frases</PageTitle>

<div class="container">
    <ListaPaginada Dados="frases.Where(f => f.Arquivada == false).OrderBy(f => f.DataCadastro)" QtdeItensPorPagina="10">

        <ConteudoPrincipal>
            <div class="card sombra">
                <p class="categoria">@context.Categoria?.Categoria</p>
                <p class="frase">@context.Descricao</p>
                <p class="autor">Autor: @context.Autor?.Nome</p>
                <Compartilhamento Modelo="context" />
            </div>
        </ConteudoPrincipal>
    </ListaPaginada>

    @*<ObservadorTamanhoJanela AoRedimensionar="Redimensionou" />*@
    @*@_ehCelular*@

</div>
 
@code {
    private IQueryable<Frase> frases;
    private string currentUrl;

    // ao inicializar busca todas frases
    protected override async Task OnInitializedAsync() { 

        //url atual
        currentUrl = NavigationManager.Uri;

        frases = await FraseService.BuscarTodas(); 

        // alimenta autores e categoria
        foreach (var frase in frases){
            frase.Autor = await AutorService.BuscarPor(frase.IdAutor);
            frase.Categoria = await CategoriaFraseService.BuscarPor(frase.IdCategoriaFrase);
        }
    }

    public Dimensao? Dimensao { get; private set; }

    private bool _ehCelular = false;

    private async Task Redimensionou(Dimensao dimensao) {
        _ehCelular = dimensao.Largura <= 640;
        Dimensao = dimensao;
        await Task.CompletedTask;
    }
}