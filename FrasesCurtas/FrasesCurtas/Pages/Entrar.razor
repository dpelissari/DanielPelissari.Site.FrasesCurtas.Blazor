@page "/entrar";
@using FrasesCurtas.Autenticacao;
@using FrasesCurtas.Componentes
@using FrasesCurtas.Models;
@inject ContaUsuarioService contaUsuarioservice;
@inject IJSRuntime js;
@inject AuthenticationStateProvider provedorAutenticacao;
@inject NavigationManager navManager;
@layout LoginLayout;

<EditForm Model="usuario" OnValidSubmit="Autenticar">
    <div class="container">
        <div class="login sombra">
        <h1>Painel do adminstrador</h1>
            <div class="campo">
                <label>Login</label>
                <input @bind="usuario.Usuario" />
                <ValidationMessage For="@(() => usuario.Usuario)" />
            </div>
            <div class="campo">
                <label>Senha</label>
                <input @bind="usuario.Senha" type="password" />
                <ValidationMessage For="@(() => usuario.Senha)" />
            </div>

            <PlaceHolder Visible="!string.IsNullOrEmpty(MensagemErro)">
                <div class="erro">
                    @MensagemErro
                </div>
            </PlaceHolder>

            <DataAnnotationsValidator />
           
            <button @onclick="Autenticar" class="btn">Acessar</button>
            
        </div>
    </div>
</EditForm>

@code {

    private Login usuario = new Login();
    public string MensagemErro { get; set; } = string.Empty;

    private async Task Autenticar()
    {
        var contaUsuario = contaUsuarioservice.BuscarPorNome(usuario.Usuario);
        if (contaUsuario == null || contaUsuario.Senha != usuario.Senha)
        {
            MensagemErro = "Usuário ou senha invalidos, verifique suas credencias e tente novamente!";
            return;
        }

        var provedorAutenticacaoCustomizado = (ProvedorAutenticacao)provedorAutenticacao;
        await provedorAutenticacaoCustomizado.AtualizarEstadoAutenticao(new UsuarioSessao
        {
            Nome = contaUsuario.Nome,
            NivelAcesso = contaUsuario.NivelAcesso
        });
        navManager.NavigateTo("int/frases/", true);
    }
}
 