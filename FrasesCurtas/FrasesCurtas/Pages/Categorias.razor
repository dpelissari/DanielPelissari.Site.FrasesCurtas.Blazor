@page "/categorias"


@using FrasesCurtas.Models
@inject IJSRuntime JSRuntime
@inject FrasesCurtas.Services.ICategoriaFraseService CategoriaFraseService;
@using FrasesCurtas.Componentes;

<PageTitle>Categorias</PageTitle>

<div class="container">
    <h1>Categorias</h1>

     <div class="categorias">

        <ListaPaginada Dados="categorias.OrderBy(a => a.Categoria).Where(a => a.Ativa)" QtdeItensPorPagina="21">
            <ConteudoPrincipal>
                    <div class="categoria">
                    <p>@context.Categoria</p>
                    <p>@context.Descricao</p>
                    <p>@context.Descricao</p>
                    <p>@context.Ativa</p>
                    </div>
            </ConteudoPrincipal>
        </ListaPaginada>
      </div>
</div>

@code {
    private IQueryable<CategoriaFrase> categorias;

    // ao inicializar busca todos autores
    protected override async Task OnInitializedAsync() {
        categorias = await CategoriaFraseService.BuscarTodas();
    }

    async Task ApagarFrase(Guid id) {

        // exibe um alerta de confirmacao ao apagar autor
        bool confirm = await JSRuntime.InvokeAsync<bool>("confirm", "Tem certeza que deseja excluir essa categoria?");

        // se a confirmacao for false para por aqui
        if (confirm is false) return;

        // se a confirmacao for true logaliza o autor pelo idw
        var cat = await CategoriaFraseService.BuscarPor(id);

        // apaga o autor encontrado
        await CategoriaFraseService.Apagar(cat);

        // atualiza os autores que serao exibidos
        categorias = await CategoriaFraseService.BuscarTodas();

        StateHasChanged();
    }
}