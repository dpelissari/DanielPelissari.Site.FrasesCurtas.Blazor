@page "/categorias"

@using FrasesCurtas.Models
@inject IJSRuntime JSRuntime
@inject ICategoriaFraseService CategoriaFraseService;
@using FrasesCurtas.Componentes;
@using FrasesCurtas.Services;
@using FrasesCurtas.Interfaces;
@layout InternasLayout;

<PageTitle>Categorias</PageTitle>

<div class="container">
    <div class="card mt80">
        <h1>Categorias</h1>
        <ul class="categorias">
            <ListaPaginada Dados="categorias.OrderBy(a => a.Categoria).Where(a => a.Ativo)" QtdeItensPorPagina="50">
                <ConteudoPrincipal>
                    <NavLink href="@($"categoria/{context.Id}")">
                        <li>@context.Categoria</li>
                    </NavLink>
                </ConteudoPrincipal>
            </ListaPaginada>
        </ul>
    </div>
</div>

@code {
    private IQueryable<CategoriaFrase> categorias;

    // ao inicializar busca todos autores
    protected override async Task OnInitializedAsync() {
        categorias = await CategoriaFraseService.BuscarTodas();
    }

    async Task ApagarFrase(Guid id) {

        // exibe um alerta de confirmacao ao apagar autor
        bool confirm = await JSRuntime.InvokeAsync<bool>("confirm", "Tem certeza que deseja excluir essa categoria?");

        // se a confirmacao for false para por aqui
        if (confirm is false) return;

        // se a confirmacao for true logaliza o autor pelo id
        var categoria = await CategoriaFraseService.BuscarPor(id);

        // apaga o autor encontrado
        await CategoriaFraseService.Apagar(categoria);

        // atualiza os autores que serao exibidos
        categorias = await CategoriaFraseService.BuscarTodas();

        StateHasChanged();
    }
}