@page "/autor/"
@page "/autor/{id}"
@using FrasesCurtas.Models
@using FrasesCurtas.Services;
@inject FrasesCurtas.Services.IFraseService FraseService;
@inject FrasesCurtas.Services.IAutorService AutorService;
@inject FrasesCurtas.Services.ICategoriaFraseService CategoriaFraseService;
@layout InternasLayout;

<div class="container mt80">
    @if (autor != null)
    {
        <h2>Frases de @autor.Nome</h2>

        @if (frases != null && frases.Any())
        {
            @foreach (var frase in frases)
            {

                <div class="card sombra">
                    <p class="categoria">@frase.Categoria.Categoria</p>
                    <p class="frase">@frase.Descricao</p>
                </div>
            }
        }
        else
        {
            <p>Nenhuma frase encontrada para este autor.</p>
        }
    }
    else
    {
        <p>Autor não encontrado.</p>
    }
    <NavLink href="autores/">Voltar lista de autores</NavLink>
</div>


@code {
    [Parameter]
    public string Id { get; set; }

    private Autor autor;
    private IQueryable<Frase> frases;
    private string mensagem;

    protected override async Task OnInitializedAsync() {
        if (!string.IsNullOrEmpty(Id) && Guid.TryParse(Id, out Guid autorId))
        {
            autor = await AutorService.BuscarPor(autorId);
            if (autor != null)
            {
                frases = await FraseService.BuscarPorAutorId(autorId);

                // Alimenta autores e categoria
                foreach (var frase in frases)
                {
                    frase.Categoria = await CategoriaFraseService.BuscarPor(frase.IdCategoriaFrase);
                }
            }
        }
        
    }
}