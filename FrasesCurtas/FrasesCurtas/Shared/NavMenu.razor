@using FrasesCurtas.Classes.Autenticacao
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navManager;

<header>
    <div class="container">
        <div class="nav-container" tabindex="0">
            <button class="nav-toggle" onclick="abreMenu();"></button>

            <nav class="nav-items" onclick="fecharMenu()">
                <NavLink class="nav-item" href="/">Frases</NavLink>
                <NavLink class="nav-item" href="/autores">Autores</NavLink>
                <NavLink class="nav-item" href="/categorias">Categorias</NavLink>
                <AuthorizeView>
                    <Authorized>
                        <NavLink class="nav-item" href="/int/frases">Gerenciar Frases</NavLink>
                        <NavLink class="nav-item" href="/int/autores">Gerenciar Autores</NavLink>
                        <NavLink class="nav-item" href="/int/categorias">Gerenciar Categorias</NavLink>
                        <NavLink class="nav-item" @onclick="Logout">Fazer logout</NavLink>
                    </Authorized>
                    <NotAuthorized>
                        <NavLink class="nav-item" href="entrar/">Efetuar login</NavLink>
                    </NotAuthorized>
                </AuthorizeView>
            </nav>
        </div>
        <span class="logo">Frases Curtas</span>
        <button class="btn-modo-visualizacao" onclick="toggleDarkMode()">
            <img src="imagens/icones/ico-modo-escuro.svg" width="40" height="40" alt="Habilitar modo escuro" id="ico-modovisual" />
        </button>
    </div>
    
</header>


@code {

    private async Task Logout() {
        var customAuthStateProvider = (ProvedorAutenticacao)authStateProvider;
        await customAuthStateProvider.AtualizarEstadoAutenticao(null);
        navManager.NavigateTo("/", true);
    }

}