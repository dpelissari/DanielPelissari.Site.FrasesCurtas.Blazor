@using FrasesCurtas.Models;
@using SixLabors.ImageSharp;

<div>
    <label>@TextoLabel</label>

    <InputFile OnChange="HandleFileSelection" />

    <PlaceHolder Visible="@ExibeImagem">
        <img src="@Modelo.CaminhoImagem" style="width:100px; height:100px; border-radius:50%;">
    </PlaceHolder>

    <PlaceHolder Visible="@ExibeBotaoUpload">
        <button @onclick="EnviarImagem" type="button">UPLOAD</button>
    </PlaceHolder>

    <PlaceHolder Visible="@(Modelo.CaminhoImagem != null)">
        <button @onclick="RemoverImagem" type="button">REMOVER</button>
    </PlaceHolder>

    <PlaceHolder Visible="!string.IsNullOrEmpty(Erro)">
        <p>@Erro</p>
    </PlaceHolder>
</div>

@code {
    @typeparam T where T : Autor

    [Parameter]
    public T Modelo { get; set; }

    [Parameter]
    public string DiretorioImagem { get; set; } = string.Empty;

    [Parameter]
    public int LarguraImagem { get; set; } = 150;

    [Parameter]
    public string TextoLabel { get; set; } = "Enviar imagem";

    public string Erro { get; set; } = string.Empty;

    private IBrowserFile Arquivo { get; set; }

    public int caminhoArquivo { get; set; } = 150;

    public bool ExibeImagem => Modelo.CaminhoImagem != null;
    public bool ExibeBotaoUpload => Modelo.CaminhoImagem == null && Arquivo != null;
    public bool ExibeBotaoRemover => Modelo.CaminhoImagem != null;

    private bool ArquivoEhImagem(IBrowserFile file) {

        // extensões de imagem válidas
        var extensoesPermitidas = new[] { ".jpg", ".jpeg", ".png" };

        // verifica se a extensão do arquivo está na lista de extensões permitidas
        var extensaoArquivo = Path.GetExtension(file.Name);
        return extensoesPermitidas.Contains(extensaoArquivo.ToLower());
    }

    private async Task HandleFileSelection(InputFileChangeEventArgs e) {
        Arquivo = e.File;
    }

    private async Task EnviarImagem() {
        if (Arquivo != null && ArquivoEhImagem(Arquivo))
        {
            // diretório onde a imagem será armazenada
            var diretorio = $"wwwroot/{DiretorioImagem}";

            // caminho para imagem armazenada
            var caminhoArquivo = Path.Combine(diretorio, Arquivo.Name);

            // verifica se o diretório existe, se não existir cria a pasta
            if (!Directory.Exists(diretorio)) Directory.CreateDirectory(diretorio);

            // redimensiona a imagem
            using (var image = await SixLabors.ImageSharp.Image.LoadAsync(Arquivo.OpenReadStream()))
            {
                // define a largura da imagem como 100 pixels e calcula a altura automaticamente para manter a proporção
                image.Mutate(x => x.Resize(new ResizeOptions
                    {
                        Size = new Size(LarguraImagem, 0),
                        Mode = ResizeMode.Max,
                    }));

                // salva a imagem redimensionada
                await image.SaveAsync(caminhoArquivo);
            }

            // guarda caminho da imagem
            Modelo.CaminhoImagem = $"/{DiretorioImagem}/{Arquivo.Name}";

            // limpa erros
            Erro = string.Empty;
        }
        else
        {
            Erro = "Arquivo não selecionado ou inválido (Arquivos aceitos: .jpg e .png)";
        };
    }

    private async Task RemoverImagem() {
        if (Modelo.CaminhoImagem != null)
        {
            // Remove a imagem do diretório
            //var caminhoArquivo = Path.Combine("wwwroot", Modelo.CaminhoImagem.TrimStart('/'));
            //if (System.IO.File.Exists(caminhoArquivo))
            //{
            //    System.IO.File.Delete(caminhoArquivo);
            //}
            // Limpa o caminho da imagem do modelo
            Modelo.CaminhoImagem = null;
        }
    }
}
