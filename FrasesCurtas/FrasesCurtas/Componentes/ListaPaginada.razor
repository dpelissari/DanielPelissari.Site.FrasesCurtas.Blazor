@typeparam TItem

@if (!Dados.Any())
{
    <div class="none-indicator">(none)</div>
}
else
{
    @foreach (TItem item in ConteudoAtualExibido)
    {
        @ConteudoPrincipal(item)
    }

    @if (TotalPaginas() > 1)
    {
        <div>
          
            @if (PaginaAtual == 1)
            {
                // se for a primeira pagina inativa botoes de retroceder
                <button class="pg 1 retrocer-todos" disabled>&laquo;</button>
                <button class="pg 2 retroceder-um" disabled>&lsaquo;</button>
            }
            else
            {
                // se nao for a primeira pagina ativa botoes de retroceder
                <button @onclick="@AvancarUmaPagina" class="pg 3 retroceder-todos">&laquo;</button>
                <button @onclick="@VoltarUmaPagina" class="pg 4 retroceder-um">&lsaquo;</button>
            }
            <span>@PaginaAtual de @TotalPaginas() </span>

            
            @if (!irUltimaPagina())
            {
                // se nao for a ultima pagina inativa os botoes de avancar
                <button @onclick="@MoverProProximo"class="pg 5 avancar-um">&rsaquo;</button>
                <button @onclick="@MoverProUltimo" class="pg 6 avancar-todos">&raquo;</button>
            }
            else
            {
                // se nao for a primeira ou a ultima pagina ativa botoes de avancar uma pagina e de retroceder uma pagina
                <button disabled class="pg 7 avancar-um">&rsaquo;</button>
                <button disabled class="pg 8 avancar-todos">&raquo;</button>
            }
        </div>
    }
}

@code {

    [Parameter]
    public IQueryable<TItem> Dados { get; set; }
    [Parameter]
    public RenderFragment<TItem> ConteudoPrincipal { get; set; }
    [Parameter]
    public int QtdeItensPorPagina { get; set; } = 5;
    private int PaginaAtual = 1;
    private List<TItem> ConteudoAtualExibido;
    private int ContagemTotal;

    protected override void OnParametersSet() {
        AtualizarConteudoExibido();
        ContagemTotal = Dados.Count();
    }

    private void AtualizarConteudoExibido() {
        ConteudoAtualExibido = Dados.Skip((PaginaAtual - 1) * QtdeItensPorPagina).Take(QtdeItensPorPagina).ToList();
    }

    private bool irUltimaPagina() {
        return PaginaAtual >= TotalPaginas();
    }

    private int TotalPaginas() {
        return Convert.ToInt32(Math.Ceiling(ContagemTotal / Convert.ToDecimal(QtdeItensPorPagina)));
    }

    private void AvancarUmaPagina() {
        PaginaAtual = 1;
        AtualizarConteudoExibido();
    }

    private void VoltarUmaPagina() {
        PaginaAtual--;
        AtualizarConteudoExibido();
    }

    private void MoverProProximo() {
        PaginaAtual++;
        AtualizarConteudoExibido();
    }

    private void MoverProUltimo() {
        PaginaAtual = TotalPaginas();
        AtualizarConteudoExibido();
    }
}