@typeparam TItem

@if (!Dados.Any())
{
    <div class="none-indicator">(Nenhum registro encontrado)</div>
}
else
{
    @foreach (TItem item in ConteudoAtualExibido)
    {
        @ConteudoPrincipal(item)
    }

    @if (TotalPaginas() > 1)
    {
        <div class="paginacao">
            <button @onclick="MoverParaPrimeiraPagina" class="pg retrocer-todos">&laquo;</button>
            
            @foreach (var page in Paginas)
            {
                <button @onclick="() => IrParaPagina(page.Numero)" class="pg @(page.EhAtual ? "ativo" : "")">@(page.Numero)</button>
            }

            <button @onclick="MoverParaUltimaPagina" class="pg avancar-todos">&raquo;</button>
        </div>
    }
}

@code {
    [Parameter]
    public IQueryable<TItem> Dados { get; set; }
    [Parameter]
    public RenderFragment<TItem> ConteudoPrincipal { get; set; }
    [Parameter]
    public int QtdeItensPorPagina { get; set; } = 5;

    private List<TItem> ConteudoAtualExibido = new List<TItem>();
    private int ContagemTotal;
    private int? PaginaAtual = 1;

    private class Pagina
    {
        public int Numero { get; set; }
        public bool EhAtual { get; set; }
    }

    private List<Pagina> Paginas => CriarListaDePaginas();

    protected override void OnParametersSet()
    {
        ContagemTotal = Dados.Count();
        AtualizarConteudoExibido();
    }

    private void AtualizarConteudoExibido()
    {
        ConteudoAtualExibido = Dados.Skip((PaginaAtual.Value - 1) * QtdeItensPorPagina).Take(QtdeItensPorPagina).ToList();
    }

    private List<Pagina> CriarListaDePaginas()
    {
        var totalPaginas = TotalPaginas();
        var paginas = new List<Pagina>();

        for (int i = 1; i <= totalPaginas; i++)
        {
            paginas.Add(new Pagina { Numero = i, EhAtual = i == PaginaAtual });
        }

        return paginas;
    }

    private bool IrUltimaPagina()
    {
        return PaginaAtual >= TotalPaginas();
    }

    private int TotalPaginas()
    {
        return Convert.ToInt32(Math.Ceiling(ContagemTotal / Convert.ToDecimal(QtdeItensPorPagina)));
    }

    private void IrParaPagina(int pagina)
    {
        PaginaAtual = pagina;
        AtualizarConteudoExibido();
    }

    private void MoverParaPrimeiraPagina()
    {
        PaginaAtual = 1;
        AtualizarConteudoExibido();
    }

    private void MoverParaUltimaPagina()
    {
        PaginaAtual = TotalPaginas();
        AtualizarConteudoExibido();
    }
}